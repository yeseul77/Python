# -*- coding: utf-8 -*-
"""240115.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jVUagakuAjsa9LSTcOHXUK1VRA9BtoQC
"""

from google.colab import drive
drive.mount('/content/drive')

Mounted at /content/drive

import numpy as np
import matplotlib.pyplot as plt

x = np.array([1,2,3,4]) #벡터
y = np.array([1,0,1,0]) #벡터

x

y

y.shape #벡터의 사이즈를 알 수 있음 shape
x+y

x-y

x

#스칼라
a = 10

x*a  #각 요소에 스칼라값을 곱해줌

x-a  # 브로드 캐스팅

x

y

np.dot(x,y) #(4,1)*(4,1)->(1,4)*(4,1)

x.T #trans 자리를 바꿔줌 ,x백터를 자리변환해줌

x.T @ y ,# x백터를 자리변환후 y와 내적연산

np.dot(x,y)

import pandas as pd
import requests
from PIL import Image
from io import BytesIO
import cv2

version_json=requests.get('https://ddragon.leagueoflegends.com/api/versions.json').json()

version_currrent=version_json[0]

version_currrent

champion_url = f'https://ddragon.leagueoflegends.com/cdn/{version_current}/data/ko_KR/champion.json'
champion_json = requests.get(champion_url).json()

import requests
version_currrent= "14.1.1"
champion_url = f'https://ddragon.leagueoflegends.com/cdn/{version_current}/data/ko_KR/champion.json'
champion_json = requests.get(champion_url).json()

champion_json['data'].keys()

champion_json['data']['Aatrox']

champion_img_url = f'https://ddragon.leagueoflegends.com/cdn/{version_current}/img/champion/'
for champion_name, data in champion_json['data'].items():
    print(champion_name, champion_img_url + data['image']['full'])

# pil,io를 활용해 이미지를 띄워볼것임
jayce_img_url = 'https://ddragon.leagueoflegends.com/cdn/11.1.1/img/champion/Jayce.png'
jayce_img_res = requests.get(jayce_img_url)
Image.open(BytesIO(jayce_img_res.content))

Image.open(BytesIO(jayce_img_res.content)).convert('L')

jayce_img=Image.open(BytesIO(jayce_img_res.content)).convert('L')

jayce_img_vector = np.asanyarray(jayce_img, dtype=np.int)

jayce_img_vector.shape

120*120

120*125
# jayce_img_vector.reshape(120,125) >>  이건 오류남

#가렌이미지 받아와서 gray 컬러로 출력후 ,
#120,120의 가렌 벡터 변수명 : garen_img_vector

garen_img_url ='https://ddragon.leagueoflegends.com/cdn/11.1.1/img/champion/Garen.png'
garen_img_res = requests.get(garen_img_url)
Image.open(BytesIO(garen_img_res.content))

Image.open(BytesIO(garen_img_res.content)).convert('L')
 #'L'흑백(그레이스케일)

garen_img=Image.open(BytesIO(garen_img_res.content)).convert('L')

garen_img_vector = np.asanyarray(garen_img, dtype=np.int)

garen_img_vector=garen_img_vector.reshape(120 * 120)

garen_img_vector

Aatrox_img_url = 'https://ddragon.leagueoflegends.com/cdn/14.1.1/img/champion/Aatrox.png'
Aatrox_img_res = requests.get(Aatrox_img_url)
Aatrox_img = Image.open(BytesIO(Aatrox_img_res.content)).convert('L')
Aatrox_img_vector = np.asarray(Aatrox_img, dtype=np.int)
Aatrox_img_vector = Aatrox_img_vector.reshape(120 * 120)

jayce_img_vector
garen_img_vector
Aatrox_img_vector

# 내적 -> return 스칼라.

jayce_img_vector = jayce_img_vector.reshape(120 * 120)

(jayce_img_vector.T @ garen_img_vector),(jayce_img_vector.T @ Aatrox_img_vector)

jayce_img_vector

def cos_sim(a,b):
  res = np.dot(a,b) /(np.linalg.norm(a)*np.linalg.norm(b))
  return res
  #np.dot 분모= 크기(노름) 분자 =내적값

cos_sim(jayce_img_vector, garen_img_vector)
#jayce와garen의 유사도

cos_sim(jayce_img_vector, Aatrox_img_vector)
#jayce와Aatrox의 유사도

len(champion_json['data'])

champ2img={}
champion_img_url = f'https://ddragon.leagueoflegends.com/cdn/{version_current}/img/champion/'
for champion_name, data in champion_json['data'].items():
    print(champion_name, champion_img_url + data['image']['full'])

def get_vector(champ, version_current):
    img_url = f'https://ddragon.leagueoflegends.com/cdn/{version_current}/img/champion/{champ}'
    img_res = requests.get(img_url)

    # 이미지를 흑백으로 변환
    img = Image.open(BytesIO(img_res.content)).convert('L')

    # 이미지를 NumPy 배열로 변환
    img_vector = np.asarray(img, dtype=np.int)
    img_vector = img_vector.reshape(120 * 120)

    return img_vector

cos_score_dict ={}
for champ1 in champ2img.keys():
  for champ2 in champ2img.keys():
    if (champ1 == champ2) or (champ1+'/'+champ2 in cos_score_dict.keys()):
      continue
      champ1_vec =get_vector(champ2img[champ1])
      champ2_vec =get_vector(champ2img[champ2])
      cos_socre = cos_sim(champ1_vec,champ2_vec)
      cos_score_dict[champ1+'/'+champ2]=cos_score

from tqdm import tqdm

cos_score_dict = {}

# tqdm(list(champ2img.keys())[:3])에서 [:3]은 처음 3개 챔피언만 사용하도록 선택한 것으로 가정
for champ1 in tqdm(list(champ2img.keys())[:3]):
    for champ2 in champ2img.keys():
        if (champ1 == champ2):
            continue
        champ1_vec = get_vector(champ2img[champ1])
        champ2_vec = get_vector(champ2img[champ2])
        cos_score = cos_sim(champ1_vec, champ2_vec)
        cos_score_dict[champ1+'/'+champ2] = cos_score

sorted_dict = sorted(cos_score_dict.items(), key=lambda x: x[1], reverse=True)

sorted_dict